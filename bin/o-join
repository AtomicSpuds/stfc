#!/usr/bin/perl

# Copyright (c) 2019 Atomic Spuds <AtomicSpudsGame@gmail.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Data::Dumper;

our $opt_v = 0;

if (!open(OA,"data/o-abilities")) {
	print "o-abilities can't be opened, ugh\n";
	exit(1);
}
if (!open(OS,"data/o-stats")) {
	print "o-stats can't be opened, ugh\n";
	exit(1);
}

our $max = { };

our @officers;

my @flagslist = (
	'player', 'hostile', 'station', 'mining',
	'combat', 'dodge', 'shield', 'armor', 'hull health', 'kinetic', 'energy', 'weapon', 'health',
	'interceptor', 'battleship', 'explorer', 'surveyor',
	'hunting', 'mining', 'miner', 'hunter',
	'ship', 'captain maneuver',
	'tritanium', 'dilithium', 'parsteel',
);

# translate lhs into rhs flag name (alias?)
our $flagtr = { };
$flagtr->{miner} = 'mining';
$flagtr->{hunter} = 'hunting';

# auto add additional flags
our $flagadd = { };
@{$flagadd->{combat}} = ('dodge', 'shield', 'armor', 'hull health', 'kinetic' , 'energy', 'weapon', 'health');
@{$flagadd->{player}} = ('combat');
@{$flagadd->{hostile}} = ('combat');
@{$flagadd->{station}} = ('combat');

foreach my $cm (('combat', 'mining')) {
	push @{$flagadd->{$cm}}, 'captain maneuver';
}

# one flag excludes other
our $flagexcl = { };
@{$flagexcl->{player}} = ('hostile', 'station', 'mining');
@{$flagexcl->{hostile}} = ('player', 'station', 'mining');
@{$flagexcl->{station}} = ('player', 'hostile', 'mining');
@{$flagexcl->{mining}} = ('player', 'hostile', 'station', 'hunting');
@{$flagexcl->{hunting}} = ('mining', 'station');
@{$flagexcl->{parsteel}} = ('tritanium', 'dilithium');
@{$flagexcl->{tritanium}} = ('parsteel', 'dilithium');
@{$flagexcl->{dilithium}} = ('parsteel', 'tritanium');

my $l;
while(<OA>) {
	chomp($l=$_);
	if ($l =~ /^\s+([0-9]+)\s+([A-Z][a-z]+)\s+"([^"]+)"\s+(.+)\s+([\+\-]\s?[0-9]+%\s.*)$/) {
		my $o = { };
		$o->{serial} = $1;
		$o->{pos} = $2;
		$o->{oname} = $3;
		$o->{aname} = $4;
		$o->{desc} = $5;
		$o->{aname} =~ s/\s+$//;
		foreach my $flag (@flagslist) {
			my $freal = $flag;
			if (defined($flagtr->{$flag})) {
				$freal = $flagtr->{$flag};
			}
			if (!defined($o->{flags}->{$freal})) {
				$o->{flags}->{$freal} = 0;
			}
			foreach my $i (('aname', 'desc')) {
				if ($o->{$i} =~ /${flag}/i) {
					if ($opt_v > 0) {
						print $o->{oname}." flag ".${freal}."++\n";
					}
					$o->{flags}->{$freal}++;
				}
			}
		}
		#print Dumper($o);
		push @officers,$o;
		check_max($o, 'aname');
		check_max($o, 'oname');
		next;
	}
	print "Unhandled line: $l\n";
}
close(OA);

our @officer_stats;
while(<OS>) {
	chomp($l=$_);
	if ($l =~ /^(#|\s*)$/) {
		next;
	}
	if ($l =~ /^\s+([0-9]+)\s+([0-9]+)\/([0-9]+)\s+([0-9]+)\s+([0-9]+)\s+([0-9]+)\s+([0-9]+)\s+([0-9]+)\/([0-9]+)\s+(.*)$/) {
		my $os = { };
		$os->{serial} = $1;
		$os->{line} = $l;
		$os->{curl} = $2;
		$os->{maxl} = $3;
		$os->{strength} = $4;
		$os->{attack} = $5;
		$os->{defense} = $6;
		$os->{health} = $7;
		$os->{curp} = $8;
		$os->{reqp} = $9;
		$os->{desc} = $10;
		if ($os->{desc} =~ /^([A-Z].*)\s+\((.*)\)(.*)$/) {
			$os->{name} = $1;
			$os->{group} = $2;
			$os->{rank} = $3;
			if (defined($os->{rank})) {
				$os->{rank} =~ s/^\s*//;
			}
		} elsif ($os->{desc} =~ /^([A-Z].*)\s+((Lie|Ens).*)$/) {
			$os->{name} = $1;
			$os->{rank} = $2;
		} else {
			$os->{name} = $os->{desc};
		}
		push @officer_stats,$os;
		next;
	}

	print "Unhandled line: $l\n";
}
close(OS);
	

my $onmax = $max->{oname};
my $anmax = $max->{aname};
my $ofmt = "%3s %-${onmax}s %-${anmax}s %s\n";

my $lname = "";
my $ocmanable = "";
foreach my $o (sort
	{
		if ($a->{oname} eq $b->{oname}) {
			$a->{pos} cmp $b->{pos};
		} else {
			$a->{oname} cmp $b->{oname};
		}
	} @officers) {
	if ($lname ne $o->{oname}) {
		if (length($lname) > 0) {
			$ocmanable .= "\n";
		}
		$lname = $o->{oname};
	}
	$ocmanable .= sprintf $ofmt, $o->{pos}, $o->{oname}, $o->{aname}, $o->{desc};
}

my $osfmt = "%3d/%3d %4d %3d %3d %3d %2d/%2d %-12s %-25s %s\n";

my $os_str = "";
foreach my $o (sort {
		if ($a->{reqp} == 0 && $b->{reqp} == 0) {
			$b->{attack} <=> $a->{attack};
		} elsif ($a->{reqp} == 0 && $b->{reqp} > 0) {
			$b->{reqp} <=> $a->{reqp};
		} elsif ($a->{reqp} > 0 && $b->{reqp} == 0) {
			$b->{reqp} <=> $a->{reqp};
		} elsif ($a->{reqp} > 0 && $b->{reqp} > 0) {
			if ($a->{attack} == $b->{attack}) {
				$b->{defense} <=> $a->{defense};
			} else {
				$b->{attack} <=> $a->{attack};
			}
		} else {
			$b->{attack} <=> $a->{attack};
		}
	} @officer_stats) {
	#$os_str .= $o->{line}."\n";
	if (!defined($o->{rank})) {
		$o->{rank} = "";
	}
	if (!defined($o->{group})) {
		$o->{group} = "";
	}
	if (!defined($o->{name})) {
		$o->{name} = "<n:undef>";
	}
	$os_str .= sprintf $osfmt, $o->{curl}, $o->{maxl},
	    $o->{strength}, $o->{attack}, $o->{defense}, $o->{health},
	    $o->{curp}, $o->{reqp},
	    $o->{rank}, $o->{name}, $o->{group};
}
	

if (!open(T,"templates/OFFICERS.txt")) {
	print "templates/OFFICERS.txt can't be opened, ugh\n";
	exit(1);
}
if (!open(O,">OFFICERS.txt")) {
	print "OFFICERS.txt can't be opened for writing, ugh\n";
	exit(1);
}

while(<T>) {
	chomp($l=$_);
	$l =~ s/%O_C_MANEAUVER_ABILITY%/${ocmanable}/;
	$l =~ s/%O_C_STATS%/${os_str}/;
	if ($l =~ /%(battleship|explorer|surveyor|interceptor)(\[.*\]%|%)/) {
		my @olist;
		my $ship = $1;
		my $list = $2;
		if (length($list) > 1) {
			my @flags;
			$list =~ s/[\[\]%]//g;
			if ($list =~ /,/) {
				@flags = split(/,/,$list);
			} else {
				@flags = ($list);
			}
			print O " ship=${ship} flags=";
			foreach my $f (@flags) {
				print O "${f},";
			}
			@olist = search_officers($ship, @flags);
		} else {
			print O " ship=${ship}";
			@olist = search_officers($ship);
		}
		print O "\n";
		foreach my $o (sort
			{
				if ($a->{pos} eq $b->{pos}) {
					$a->{oname} cmp $b->{oname};
				} else {
					$a->{pos} cmp $b->{pos};
				}
			} @olist) {
			printf O " ${ofmt}", $o->{pos}, $o->{oname}, $o->{aname}, $o->{desc};
		}
		next;
	}
	print O "${l}\n";
}
close(O);
close(T);

exit(0);

sub check_max {
	my ($o, $n) = @_;
	my $len = length($o->{$n});
	if (!defined($max->{$n})) {
		$max->{$n} = $len;
		return;
	}
	if ($max->{$n} < $len) {
		$max->{$n} = $len;
	}
}

sub search_officers {
	my (@searches) = @_;

	my @olist;

	my $matchinfo = { };

	my $scount = 0;
	while ($scount <= $#searches) {
		my $s = $searches[$scount++];
		foreach my $o (@officers) {
			my $oname = $o->{oname};
			my $pos   = $o->{pos};
			foreach my $sa (@{$flagadd->{$s}}) {
				if (!grep(/$sa/, @searches)) {
					push @searches, $sa;
				}
			}
			my $flagval = $o->{flags}->{$s};
			if (!defined($flagval)) {
				print "no flag $s found\n";
				next;
			}
			if ($o->{flags}->{$s} > 0) {
				my $oskip = 0;
				foreach my $f (@{$flagexcl->{$s}}) {
					my $sf = $o->{flags}->{$f};
					if (!defined($sf)) {
						next;
					}
					if ($sf > 0) {
						$oskip++;
					}
				}
				if ($oskip == 0) {
					if (defined($matchinfo->{$oname.$pos})) {
						next;
					}
					$matchinfo->{$oname.$pos} = 1;
					push @olist, $o;
				}
				next;
			}
		}
	}
	foreach my $s (@searches) {
		foreach my $f (@{$flagexcl->{$s}}) {
			@olist = grep { $_->{flags}->{$f} == 0 } @olist;
		}
	}
	return @olist;
}
